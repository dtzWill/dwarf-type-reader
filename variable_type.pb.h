// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: variable_type.proto

#ifndef PROTOBUF_variable_5ftype_2eproto__INCLUDED
#define PROTOBUF_variable_5ftype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace VariableType {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_variable_5ftype_2eproto();
void protobuf_AssignDesc_variable_5ftype_2eproto();
void protobuf_ShutdownFile_variable_5ftype_2eproto();

class Variables;
class GlobalVariable;
class LocalVariable;
class Type;
class FieldType;
class Function;

enum Type_metaType {
  Type_metaType_isScalar = 0,
  Type_metaType_isPointer = 1,
  Type_metaType_isArray = 2,
  Type_metaType_isStruct = 3
};
bool Type_metaType_IsValid(int value);
const Type_metaType Type_metaType_metaType_MIN = Type_metaType_isScalar;
const Type_metaType Type_metaType_metaType_MAX = Type_metaType_isStruct;
const int Type_metaType_metaType_ARRAYSIZE = Type_metaType_metaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_metaType_descriptor();
inline const ::std::string& Type_metaType_Name(Type_metaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_metaType_descriptor(), value);
}
inline bool Type_metaType_Parse(
    const ::std::string& name, Type_metaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type_metaType>(
    Type_metaType_descriptor(), name, value);
}
// ===================================================================

class Variables : public ::google::protobuf::Message {
 public:
  Variables();
  virtual ~Variables();

  Variables(const Variables& from);

  inline Variables& operator=(const Variables& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Variables& default_instance();

  void Swap(Variables* other);

  // implements Message ----------------------------------------------

  Variables* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Variables& from);
  void MergeFrom(const Variables& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VariableType.LocalVariable local_variables = 1;
  inline int local_variables_size() const;
  inline void clear_local_variables();
  static const int kLocalVariablesFieldNumber = 1;
  inline const ::VariableType::LocalVariable& local_variables(int index) const;
  inline ::VariableType::LocalVariable* mutable_local_variables(int index);
  inline ::VariableType::LocalVariable* add_local_variables();
  inline const ::google::protobuf::RepeatedPtrField< ::VariableType::LocalVariable >&
      local_variables() const;
  inline ::google::protobuf::RepeatedPtrField< ::VariableType::LocalVariable >*
      mutable_local_variables();

  // repeated .VariableType.GlobalVariable global_variables = 2;
  inline int global_variables_size() const;
  inline void clear_global_variables();
  static const int kGlobalVariablesFieldNumber = 2;
  inline const ::VariableType::GlobalVariable& global_variables(int index) const;
  inline ::VariableType::GlobalVariable* mutable_global_variables(int index);
  inline ::VariableType::GlobalVariable* add_global_variables();
  inline const ::google::protobuf::RepeatedPtrField< ::VariableType::GlobalVariable >&
      global_variables() const;
  inline ::google::protobuf::RepeatedPtrField< ::VariableType::GlobalVariable >*
      mutable_global_variables();

  // @@protoc_insertion_point(class_scope:VariableType.Variables)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::VariableType::LocalVariable > local_variables_;
  ::google::protobuf::RepeatedPtrField< ::VariableType::GlobalVariable > global_variables_;
  friend void  protobuf_AddDesc_variable_5ftype_2eproto();
  friend void protobuf_AssignDesc_variable_5ftype_2eproto();
  friend void protobuf_ShutdownFile_variable_5ftype_2eproto();

  void InitAsDefaultInstance();
  static Variables* default_instance_;
};
// -------------------------------------------------------------------

class GlobalVariable : public ::google::protobuf::Message {
 public:
  GlobalVariable();
  virtual ~GlobalVariable();

  GlobalVariable(const GlobalVariable& from);

  inline GlobalVariable& operator=(const GlobalVariable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalVariable& default_instance();

  void Swap(GlobalVariable* other);

  // implements Message ----------------------------------------------

  GlobalVariable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalVariable& from);
  void MergeFrom(const GlobalVariable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VariableType.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::VariableType::Type& type() const;
  inline ::VariableType::Type* mutable_type();
  inline ::VariableType::Type* release_type();
  inline void set_allocated_type(::VariableType::Type* type);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:VariableType.GlobalVariable)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VariableType::Type* type_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_variable_5ftype_2eproto();
  friend void protobuf_AssignDesc_variable_5ftype_2eproto();
  friend void protobuf_ShutdownFile_variable_5ftype_2eproto();

  void InitAsDefaultInstance();
  static GlobalVariable* default_instance_;
};
// -------------------------------------------------------------------

class LocalVariable : public ::google::protobuf::Message {
 public:
  LocalVariable();
  virtual ~LocalVariable();

  LocalVariable(const LocalVariable& from);

  inline LocalVariable& operator=(const LocalVariable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalVariable& default_instance();

  void Swap(LocalVariable* other);

  // implements Message ----------------------------------------------

  LocalVariable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocalVariable& from);
  void MergeFrom(const LocalVariable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VariableType.Function scope = 1;
  inline bool has_scope() const;
  inline void clear_scope();
  static const int kScopeFieldNumber = 1;
  inline const ::VariableType::Function& scope() const;
  inline ::VariableType::Function* mutable_scope();
  inline ::VariableType::Function* release_scope();
  inline void set_allocated_scope(::VariableType::Function* scope);

  // required bool is_formal_parameter = 2;
  inline bool has_is_formal_parameter() const;
  inline void clear_is_formal_parameter();
  static const int kIsFormalParameterFieldNumber = 2;
  inline bool is_formal_parameter() const;
  inline void set_is_formal_parameter(bool value);

  // required .VariableType.Type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::VariableType::Type& type() const;
  inline ::VariableType::Type* mutable_type();
  inline ::VariableType::Type* release_type();
  inline void set_allocated_type(::VariableType::Type* type);

  // optional int64 offset_from_frame_base = 4;
  inline bool has_offset_from_frame_base() const;
  inline void clear_offset_from_frame_base();
  static const int kOffsetFromFrameBaseFieldNumber = 4;
  inline ::google::protobuf::int64 offset_from_frame_base() const;
  inline void set_offset_from_frame_base(::google::protobuf::int64 value);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:VariableType.LocalVariable)
 private:
  inline void set_has_scope();
  inline void clear_has_scope();
  inline void set_has_is_formal_parameter();
  inline void clear_has_is_formal_parameter();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_offset_from_frame_base();
  inline void clear_has_offset_from_frame_base();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VariableType::Function* scope_;
  ::VariableType::Type* type_;
  ::google::protobuf::int64 offset_from_frame_base_;
  ::std::string* name_;
  bool is_formal_parameter_;
  friend void  protobuf_AddDesc_variable_5ftype_2eproto();
  friend void protobuf_AssignDesc_variable_5ftype_2eproto();
  friend void protobuf_ShutdownFile_variable_5ftype_2eproto();

  void InitAsDefaultInstance();
  static LocalVariable* default_instance_;
};
// -------------------------------------------------------------------

class Type : public ::google::protobuf::Message {
 public:
  Type();
  virtual ~Type();

  Type(const Type& from);

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Type& default_instance();

  void Swap(Type* other);

  // implements Message ----------------------------------------------

  Type* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Type_metaType metaType;
  static const metaType isScalar = Type_metaType_isScalar;
  static const metaType isPointer = Type_metaType_isPointer;
  static const metaType isArray = Type_metaType_isArray;
  static const metaType isStruct = Type_metaType_isStruct;
  static inline bool metaType_IsValid(int value) {
    return Type_metaType_IsValid(value);
  }
  static const metaType metaType_MIN =
    Type_metaType_metaType_MIN;
  static const metaType metaType_MAX =
    Type_metaType_metaType_MAX;
  static const int metaType_ARRAYSIZE =
    Type_metaType_metaType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  metaType_descriptor() {
    return Type_metaType_descriptor();
  }
  static inline const ::std::string& metaType_Name(metaType value) {
    return Type_metaType_Name(value);
  }
  static inline bool metaType_Parse(const ::std::string& name,
      metaType* value) {
    return Type_metaType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // required string c_type = 2;
  inline bool has_c_type() const;
  inline void clear_c_type();
  static const int kCTypeFieldNumber = 2;
  inline const ::std::string& c_type() const;
  inline void set_c_type(const ::std::string& value);
  inline void set_c_type(const char* value);
  inline void set_c_type(const char* value, size_t size);
  inline ::std::string* mutable_c_type();
  inline ::std::string* release_c_type();
  inline void set_allocated_c_type(::std::string* c_type);

  // required .VariableType.Type.metaType kind = 3;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 3;
  inline ::VariableType::Type_metaType kind() const;
  inline void set_kind(::VariableType::Type_metaType value);

  // optional .VariableType.Type element_type = 4;
  inline bool has_element_type() const;
  inline void clear_element_type();
  static const int kElementTypeFieldNumber = 4;
  inline const ::VariableType::Type& element_type() const;
  inline ::VariableType::Type* mutable_element_type();
  inline ::VariableType::Type* release_element_type();
  inline void set_allocated_element_type(::VariableType::Type* element_type);

  // optional int64 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int64 count() const;
  inline void set_count(::google::protobuf::int64 value);

  // repeated .VariableType.FieldType member_list = 6;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 6;
  inline const ::VariableType::FieldType& member_list(int index) const;
  inline ::VariableType::FieldType* mutable_member_list(int index);
  inline ::VariableType::FieldType* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::VariableType::FieldType >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::VariableType::FieldType >*
      mutable_member_list();

  // @@protoc_insertion_point(class_scope:VariableType.Type)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_c_type();
  inline void clear_has_c_type();
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_element_type();
  inline void clear_has_element_type();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 size_;
  ::std::string* c_type_;
  ::VariableType::Type* element_type_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::RepeatedPtrField< ::VariableType::FieldType > member_list_;
  int kind_;
  friend void  protobuf_AddDesc_variable_5ftype_2eproto();
  friend void protobuf_AssignDesc_variable_5ftype_2eproto();
  friend void protobuf_ShutdownFile_variable_5ftype_2eproto();

  void InitAsDefaultInstance();
  static Type* default_instance_;
};
// -------------------------------------------------------------------

class FieldType : public ::google::protobuf::Message {
 public:
  FieldType();
  virtual ~FieldType();

  FieldType(const FieldType& from);

  inline FieldType& operator=(const FieldType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldType& default_instance();

  void Swap(FieldType* other);

  // implements Message ----------------------------------------------

  FieldType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldType& from);
  void MergeFrom(const FieldType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 field_offset = 1;
  inline bool has_field_offset() const;
  inline void clear_field_offset();
  static const int kFieldOffsetFieldNumber = 1;
  inline ::google::protobuf::int64 field_offset() const;
  inline void set_field_offset(::google::protobuf::int64 value);

  // required .VariableType.Type field_type = 2;
  inline bool has_field_type() const;
  inline void clear_field_type();
  static const int kFieldTypeFieldNumber = 2;
  inline const ::VariableType::Type& field_type() const;
  inline ::VariableType::Type* mutable_field_type();
  inline ::VariableType::Type* release_field_type();
  inline void set_allocated_field_type(::VariableType::Type* field_type);

  // required string field_name = 3;
  inline bool has_field_name() const;
  inline void clear_field_name();
  static const int kFieldNameFieldNumber = 3;
  inline const ::std::string& field_name() const;
  inline void set_field_name(const ::std::string& value);
  inline void set_field_name(const char* value);
  inline void set_field_name(const char* value, size_t size);
  inline ::std::string* mutable_field_name();
  inline ::std::string* release_field_name();
  inline void set_allocated_field_name(::std::string* field_name);

  // @@protoc_insertion_point(class_scope:VariableType.FieldType)
 private:
  inline void set_has_field_offset();
  inline void clear_has_field_offset();
  inline void set_has_field_type();
  inline void clear_has_field_type();
  inline void set_has_field_name();
  inline void clear_has_field_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 field_offset_;
  ::VariableType::Type* field_type_;
  ::std::string* field_name_;
  friend void  protobuf_AddDesc_variable_5ftype_2eproto();
  friend void protobuf_AssignDesc_variable_5ftype_2eproto();
  friend void protobuf_ShutdownFile_variable_5ftype_2eproto();

  void InitAsDefaultInstance();
  static FieldType* default_instance_;
};
// -------------------------------------------------------------------

class Function : public ::google::protobuf::Message {
 public:
  Function();
  virtual ~Function();

  Function(const Function& from);

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Function& default_instance();

  void Swap(Function* other);

  // implements Message ----------------------------------------------

  Function* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 entry_address = 2;
  inline bool has_entry_address() const;
  inline void clear_entry_address();
  static const int kEntryAddressFieldNumber = 2;
  inline ::google::protobuf::int64 entry_address() const;
  inline void set_entry_address(::google::protobuf::int64 value);

  // optional string symbol_name = 3;
  inline bool has_symbol_name() const;
  inline void clear_symbol_name();
  static const int kSymbolNameFieldNumber = 3;
  inline const ::std::string& symbol_name() const;
  inline void set_symbol_name(const ::std::string& value);
  inline void set_symbol_name(const char* value);
  inline void set_symbol_name(const char* value, size_t size);
  inline ::std::string* mutable_symbol_name();
  inline ::std::string* release_symbol_name();
  inline void set_allocated_symbol_name(::std::string* symbol_name);

  // @@protoc_insertion_point(class_scope:VariableType.Function)
 private:
  inline void set_has_entry_address();
  inline void clear_has_entry_address();
  inline void set_has_symbol_name();
  inline void clear_has_symbol_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 entry_address_;
  ::std::string* symbol_name_;
  friend void  protobuf_AddDesc_variable_5ftype_2eproto();
  friend void protobuf_AssignDesc_variable_5ftype_2eproto();
  friend void protobuf_ShutdownFile_variable_5ftype_2eproto();

  void InitAsDefaultInstance();
  static Function* default_instance_;
};
// ===================================================================


// ===================================================================

// Variables

// repeated .VariableType.LocalVariable local_variables = 1;
inline int Variables::local_variables_size() const {
  return local_variables_.size();
}
inline void Variables::clear_local_variables() {
  local_variables_.Clear();
}
inline const ::VariableType::LocalVariable& Variables::local_variables(int index) const {
  // @@protoc_insertion_point(field_get:VariableType.Variables.local_variables)
  return local_variables_.Get(index);
}
inline ::VariableType::LocalVariable* Variables::mutable_local_variables(int index) {
  // @@protoc_insertion_point(field_mutable:VariableType.Variables.local_variables)
  return local_variables_.Mutable(index);
}
inline ::VariableType::LocalVariable* Variables::add_local_variables() {
  // @@protoc_insertion_point(field_add:VariableType.Variables.local_variables)
  return local_variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VariableType::LocalVariable >&
Variables::local_variables() const {
  // @@protoc_insertion_point(field_list:VariableType.Variables.local_variables)
  return local_variables_;
}
inline ::google::protobuf::RepeatedPtrField< ::VariableType::LocalVariable >*
Variables::mutable_local_variables() {
  // @@protoc_insertion_point(field_mutable_list:VariableType.Variables.local_variables)
  return &local_variables_;
}

// repeated .VariableType.GlobalVariable global_variables = 2;
inline int Variables::global_variables_size() const {
  return global_variables_.size();
}
inline void Variables::clear_global_variables() {
  global_variables_.Clear();
}
inline const ::VariableType::GlobalVariable& Variables::global_variables(int index) const {
  // @@protoc_insertion_point(field_get:VariableType.Variables.global_variables)
  return global_variables_.Get(index);
}
inline ::VariableType::GlobalVariable* Variables::mutable_global_variables(int index) {
  // @@protoc_insertion_point(field_mutable:VariableType.Variables.global_variables)
  return global_variables_.Mutable(index);
}
inline ::VariableType::GlobalVariable* Variables::add_global_variables() {
  // @@protoc_insertion_point(field_add:VariableType.Variables.global_variables)
  return global_variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VariableType::GlobalVariable >&
Variables::global_variables() const {
  // @@protoc_insertion_point(field_list:VariableType.Variables.global_variables)
  return global_variables_;
}
inline ::google::protobuf::RepeatedPtrField< ::VariableType::GlobalVariable >*
Variables::mutable_global_variables() {
  // @@protoc_insertion_point(field_mutable_list:VariableType.Variables.global_variables)
  return &global_variables_;
}

// -------------------------------------------------------------------

// GlobalVariable

// required .VariableType.Type type = 1;
inline bool GlobalVariable::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalVariable::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalVariable::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalVariable::clear_type() {
  if (type_ != NULL) type_->::VariableType::Type::Clear();
  clear_has_type();
}
inline const ::VariableType::Type& GlobalVariable::type() const {
  // @@protoc_insertion_point(field_get:VariableType.GlobalVariable.type)
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::VariableType::Type* GlobalVariable::mutable_type() {
  set_has_type();
  if (type_ == NULL) type_ = new ::VariableType::Type;
  // @@protoc_insertion_point(field_mutable:VariableType.GlobalVariable.type)
  return type_;
}
inline ::VariableType::Type* GlobalVariable::release_type() {
  clear_has_type();
  ::VariableType::Type* temp = type_;
  type_ = NULL;
  return temp;
}
inline void GlobalVariable::set_allocated_type(::VariableType::Type* type) {
  delete type_;
  type_ = type;
  if (type) {
    set_has_type();
  } else {
    clear_has_type();
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.GlobalVariable.type)
}

// required string name = 2;
inline bool GlobalVariable::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalVariable::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalVariable::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalVariable::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GlobalVariable::name() const {
  // @@protoc_insertion_point(field_get:VariableType.GlobalVariable.name)
  return *name_;
}
inline void GlobalVariable::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:VariableType.GlobalVariable.name)
}
inline void GlobalVariable::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:VariableType.GlobalVariable.name)
}
inline void GlobalVariable::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VariableType.GlobalVariable.name)
}
inline ::std::string* GlobalVariable::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VariableType.GlobalVariable.name)
  return name_;
}
inline ::std::string* GlobalVariable::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GlobalVariable::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.GlobalVariable.name)
}

// -------------------------------------------------------------------

// LocalVariable

// required .VariableType.Function scope = 1;
inline bool LocalVariable::has_scope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalVariable::set_has_scope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalVariable::clear_has_scope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalVariable::clear_scope() {
  if (scope_ != NULL) scope_->::VariableType::Function::Clear();
  clear_has_scope();
}
inline const ::VariableType::Function& LocalVariable::scope() const {
  // @@protoc_insertion_point(field_get:VariableType.LocalVariable.scope)
  return scope_ != NULL ? *scope_ : *default_instance_->scope_;
}
inline ::VariableType::Function* LocalVariable::mutable_scope() {
  set_has_scope();
  if (scope_ == NULL) scope_ = new ::VariableType::Function;
  // @@protoc_insertion_point(field_mutable:VariableType.LocalVariable.scope)
  return scope_;
}
inline ::VariableType::Function* LocalVariable::release_scope() {
  clear_has_scope();
  ::VariableType::Function* temp = scope_;
  scope_ = NULL;
  return temp;
}
inline void LocalVariable::set_allocated_scope(::VariableType::Function* scope) {
  delete scope_;
  scope_ = scope;
  if (scope) {
    set_has_scope();
  } else {
    clear_has_scope();
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.LocalVariable.scope)
}

// required bool is_formal_parameter = 2;
inline bool LocalVariable::has_is_formal_parameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalVariable::set_has_is_formal_parameter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalVariable::clear_has_is_formal_parameter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocalVariable::clear_is_formal_parameter() {
  is_formal_parameter_ = false;
  clear_has_is_formal_parameter();
}
inline bool LocalVariable::is_formal_parameter() const {
  // @@protoc_insertion_point(field_get:VariableType.LocalVariable.is_formal_parameter)
  return is_formal_parameter_;
}
inline void LocalVariable::set_is_formal_parameter(bool value) {
  set_has_is_formal_parameter();
  is_formal_parameter_ = value;
  // @@protoc_insertion_point(field_set:VariableType.LocalVariable.is_formal_parameter)
}

// required .VariableType.Type type = 3;
inline bool LocalVariable::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalVariable::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocalVariable::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocalVariable::clear_type() {
  if (type_ != NULL) type_->::VariableType::Type::Clear();
  clear_has_type();
}
inline const ::VariableType::Type& LocalVariable::type() const {
  // @@protoc_insertion_point(field_get:VariableType.LocalVariable.type)
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::VariableType::Type* LocalVariable::mutable_type() {
  set_has_type();
  if (type_ == NULL) type_ = new ::VariableType::Type;
  // @@protoc_insertion_point(field_mutable:VariableType.LocalVariable.type)
  return type_;
}
inline ::VariableType::Type* LocalVariable::release_type() {
  clear_has_type();
  ::VariableType::Type* temp = type_;
  type_ = NULL;
  return temp;
}
inline void LocalVariable::set_allocated_type(::VariableType::Type* type) {
  delete type_;
  type_ = type;
  if (type) {
    set_has_type();
  } else {
    clear_has_type();
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.LocalVariable.type)
}

// optional int64 offset_from_frame_base = 4;
inline bool LocalVariable::has_offset_from_frame_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocalVariable::set_has_offset_from_frame_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocalVariable::clear_has_offset_from_frame_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocalVariable::clear_offset_from_frame_base() {
  offset_from_frame_base_ = GOOGLE_LONGLONG(0);
  clear_has_offset_from_frame_base();
}
inline ::google::protobuf::int64 LocalVariable::offset_from_frame_base() const {
  // @@protoc_insertion_point(field_get:VariableType.LocalVariable.offset_from_frame_base)
  return offset_from_frame_base_;
}
inline void LocalVariable::set_offset_from_frame_base(::google::protobuf::int64 value) {
  set_has_offset_from_frame_base();
  offset_from_frame_base_ = value;
  // @@protoc_insertion_point(field_set:VariableType.LocalVariable.offset_from_frame_base)
}

// required string name = 5;
inline bool LocalVariable::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LocalVariable::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LocalVariable::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LocalVariable::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LocalVariable::name() const {
  // @@protoc_insertion_point(field_get:VariableType.LocalVariable.name)
  return *name_;
}
inline void LocalVariable::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:VariableType.LocalVariable.name)
}
inline void LocalVariable::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:VariableType.LocalVariable.name)
}
inline void LocalVariable::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VariableType.LocalVariable.name)
}
inline ::std::string* LocalVariable::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VariableType.LocalVariable.name)
  return name_;
}
inline ::std::string* LocalVariable::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LocalVariable::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.LocalVariable.name)
}

// -------------------------------------------------------------------

// Type

// required int64 size = 1;
inline bool Type::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Type::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Type::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Type::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 Type::size() const {
  // @@protoc_insertion_point(field_get:VariableType.Type.size)
  return size_;
}
inline void Type::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:VariableType.Type.size)
}

// required string c_type = 2;
inline bool Type::has_c_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Type::set_has_c_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Type::clear_has_c_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Type::clear_c_type() {
  if (c_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_type_->clear();
  }
  clear_has_c_type();
}
inline const ::std::string& Type::c_type() const {
  // @@protoc_insertion_point(field_get:VariableType.Type.c_type)
  return *c_type_;
}
inline void Type::set_c_type(const ::std::string& value) {
  set_has_c_type();
  if (c_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_type_ = new ::std::string;
  }
  c_type_->assign(value);
  // @@protoc_insertion_point(field_set:VariableType.Type.c_type)
}
inline void Type::set_c_type(const char* value) {
  set_has_c_type();
  if (c_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_type_ = new ::std::string;
  }
  c_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:VariableType.Type.c_type)
}
inline void Type::set_c_type(const char* value, size_t size) {
  set_has_c_type();
  if (c_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_type_ = new ::std::string;
  }
  c_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VariableType.Type.c_type)
}
inline ::std::string* Type::mutable_c_type() {
  set_has_c_type();
  if (c_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VariableType.Type.c_type)
  return c_type_;
}
inline ::std::string* Type::release_c_type() {
  clear_has_c_type();
  if (c_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = c_type_;
    c_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Type::set_allocated_c_type(::std::string* c_type) {
  if (c_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete c_type_;
  }
  if (c_type) {
    set_has_c_type();
    c_type_ = c_type;
  } else {
    clear_has_c_type();
    c_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.Type.c_type)
}

// required .VariableType.Type.metaType kind = 3;
inline bool Type::has_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Type::set_has_kind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Type::clear_has_kind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Type::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::VariableType::Type_metaType Type::kind() const {
  // @@protoc_insertion_point(field_get:VariableType.Type.kind)
  return static_cast< ::VariableType::Type_metaType >(kind_);
}
inline void Type::set_kind(::VariableType::Type_metaType value) {
  assert(::VariableType::Type_metaType_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:VariableType.Type.kind)
}

// optional .VariableType.Type element_type = 4;
inline bool Type::has_element_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Type::set_has_element_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Type::clear_has_element_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Type::clear_element_type() {
  if (element_type_ != NULL) element_type_->::VariableType::Type::Clear();
  clear_has_element_type();
}
inline const ::VariableType::Type& Type::element_type() const {
  // @@protoc_insertion_point(field_get:VariableType.Type.element_type)
  return element_type_ != NULL ? *element_type_ : *default_instance_->element_type_;
}
inline ::VariableType::Type* Type::mutable_element_type() {
  set_has_element_type();
  if (element_type_ == NULL) element_type_ = new ::VariableType::Type;
  // @@protoc_insertion_point(field_mutable:VariableType.Type.element_type)
  return element_type_;
}
inline ::VariableType::Type* Type::release_element_type() {
  clear_has_element_type();
  ::VariableType::Type* temp = element_type_;
  element_type_ = NULL;
  return temp;
}
inline void Type::set_allocated_element_type(::VariableType::Type* element_type) {
  delete element_type_;
  element_type_ = element_type;
  if (element_type) {
    set_has_element_type();
  } else {
    clear_has_element_type();
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.Type.element_type)
}

// optional int64 count = 5;
inline bool Type::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Type::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Type::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Type::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 Type::count() const {
  // @@protoc_insertion_point(field_get:VariableType.Type.count)
  return count_;
}
inline void Type::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:VariableType.Type.count)
}

// repeated .VariableType.FieldType member_list = 6;
inline int Type::member_list_size() const {
  return member_list_.size();
}
inline void Type::clear_member_list() {
  member_list_.Clear();
}
inline const ::VariableType::FieldType& Type::member_list(int index) const {
  // @@protoc_insertion_point(field_get:VariableType.Type.member_list)
  return member_list_.Get(index);
}
inline ::VariableType::FieldType* Type::mutable_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:VariableType.Type.member_list)
  return member_list_.Mutable(index);
}
inline ::VariableType::FieldType* Type::add_member_list() {
  // @@protoc_insertion_point(field_add:VariableType.Type.member_list)
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VariableType::FieldType >&
Type::member_list() const {
  // @@protoc_insertion_point(field_list:VariableType.Type.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::VariableType::FieldType >*
Type::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:VariableType.Type.member_list)
  return &member_list_;
}

// -------------------------------------------------------------------

// FieldType

// required int64 field_offset = 1;
inline bool FieldType::has_field_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldType::set_has_field_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldType::clear_has_field_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldType::clear_field_offset() {
  field_offset_ = GOOGLE_LONGLONG(0);
  clear_has_field_offset();
}
inline ::google::protobuf::int64 FieldType::field_offset() const {
  // @@protoc_insertion_point(field_get:VariableType.FieldType.field_offset)
  return field_offset_;
}
inline void FieldType::set_field_offset(::google::protobuf::int64 value) {
  set_has_field_offset();
  field_offset_ = value;
  // @@protoc_insertion_point(field_set:VariableType.FieldType.field_offset)
}

// required .VariableType.Type field_type = 2;
inline bool FieldType::has_field_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldType::set_has_field_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldType::clear_has_field_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldType::clear_field_type() {
  if (field_type_ != NULL) field_type_->::VariableType::Type::Clear();
  clear_has_field_type();
}
inline const ::VariableType::Type& FieldType::field_type() const {
  // @@protoc_insertion_point(field_get:VariableType.FieldType.field_type)
  return field_type_ != NULL ? *field_type_ : *default_instance_->field_type_;
}
inline ::VariableType::Type* FieldType::mutable_field_type() {
  set_has_field_type();
  if (field_type_ == NULL) field_type_ = new ::VariableType::Type;
  // @@protoc_insertion_point(field_mutable:VariableType.FieldType.field_type)
  return field_type_;
}
inline ::VariableType::Type* FieldType::release_field_type() {
  clear_has_field_type();
  ::VariableType::Type* temp = field_type_;
  field_type_ = NULL;
  return temp;
}
inline void FieldType::set_allocated_field_type(::VariableType::Type* field_type) {
  delete field_type_;
  field_type_ = field_type;
  if (field_type) {
    set_has_field_type();
  } else {
    clear_has_field_type();
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.FieldType.field_type)
}

// required string field_name = 3;
inline bool FieldType::has_field_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldType::set_has_field_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldType::clear_has_field_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldType::clear_field_name() {
  if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_->clear();
  }
  clear_has_field_name();
}
inline const ::std::string& FieldType::field_name() const {
  // @@protoc_insertion_point(field_get:VariableType.FieldType.field_name)
  return *field_name_;
}
inline void FieldType::set_field_name(const ::std::string& value) {
  set_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
  // @@protoc_insertion_point(field_set:VariableType.FieldType.field_name)
}
inline void FieldType::set_field_name(const char* value) {
  set_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:VariableType.FieldType.field_name)
}
inline void FieldType::set_field_name(const char* value, size_t size) {
  set_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VariableType.FieldType.field_name)
}
inline ::std::string* FieldType::mutable_field_name() {
  set_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VariableType.FieldType.field_name)
  return field_name_;
}
inline ::std::string* FieldType::release_field_name() {
  clear_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = field_name_;
    field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FieldType::set_allocated_field_name(::std::string* field_name) {
  if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_name_;
  }
  if (field_name) {
    set_has_field_name();
    field_name_ = field_name;
  } else {
    clear_has_field_name();
    field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.FieldType.field_name)
}

// -------------------------------------------------------------------

// Function

// required int64 entry_address = 2;
inline bool Function::has_entry_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Function::set_has_entry_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Function::clear_has_entry_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Function::clear_entry_address() {
  entry_address_ = GOOGLE_LONGLONG(0);
  clear_has_entry_address();
}
inline ::google::protobuf::int64 Function::entry_address() const {
  // @@protoc_insertion_point(field_get:VariableType.Function.entry_address)
  return entry_address_;
}
inline void Function::set_entry_address(::google::protobuf::int64 value) {
  set_has_entry_address();
  entry_address_ = value;
  // @@protoc_insertion_point(field_set:VariableType.Function.entry_address)
}

// optional string symbol_name = 3;
inline bool Function::has_symbol_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Function::set_has_symbol_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Function::clear_has_symbol_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Function::clear_symbol_name() {
  if (symbol_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_name_->clear();
  }
  clear_has_symbol_name();
}
inline const ::std::string& Function::symbol_name() const {
  // @@protoc_insertion_point(field_get:VariableType.Function.symbol_name)
  return *symbol_name_;
}
inline void Function::set_symbol_name(const ::std::string& value) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(value);
  // @@protoc_insertion_point(field_set:VariableType.Function.symbol_name)
}
inline void Function::set_symbol_name(const char* value) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:VariableType.Function.symbol_name)
}
inline void Function::set_symbol_name(const char* value, size_t size) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VariableType.Function.symbol_name)
}
inline ::std::string* Function::mutable_symbol_name() {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VariableType.Function.symbol_name)
  return symbol_name_;
}
inline ::std::string* Function::release_symbol_name() {
  clear_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_name_;
    symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Function::set_allocated_symbol_name(::std::string* symbol_name) {
  if (symbol_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_name_;
  }
  if (symbol_name) {
    set_has_symbol_name();
    symbol_name_ = symbol_name;
  } else {
    clear_has_symbol_name();
    symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VariableType.Function.symbol_name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VariableType

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::VariableType::Type_metaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VariableType::Type_metaType>() {
  return ::VariableType::Type_metaType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_variable_5ftype_2eproto__INCLUDED
